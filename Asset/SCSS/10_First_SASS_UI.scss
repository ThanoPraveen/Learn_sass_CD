// sass --watch ./Asset/SCSS/10_First_SASS_UI.scss ./Asset/CSS/10_First_SASS_UI.css

@use "./Abstracts/index" as *;
/* Normal CSS create and used to variable method
:root {
    Create Variable and declare variable
    used in :root {--variable-name: expression;} and calling in var(--variable-name);
    --app-color: #C04C7E;
}
*/

//  $app-color = #{$app-color}
//  $font-Heebo = #{$font-Heebo}
// Interpolation SASS


// SASS variable create and used in variable method
// simple method to variable in first $variable-name: expression; and calling to $variable-name;

// global variable
// variables
// @import "./Abstracts/Variables/colors";
// @import "./Abstracts/Variables/fonts";

// Base into rests and urls 
@use "./Base/rest";
@use "./Base/urls";

// layout in SCSS
@use "./Layout/navigation";
@use "../SCSS/Layout/commons";


// components
@use "./Components/buttons";
// alert message in heading used to @extend
// one class should have all the styles of another class
@use "./Components/alert";

// Home page and welcome card
@use "./Pages/home";

@use "./Abstracts/index" as *;
// error checking
// @error "there is error check #{$theme-color}";

// @debug 1s > 10;

// for loop
// @for <variable> from <expression> to <expression> { ... } or @for <variable> from <expression> through <expression> { ... },
// If to is used, the final number is excluded; if through is used, it's included.

// @for $i from 1 to 6 { --> use in to normal type for loop check condition
// @for $i from 1 through 6 {
//     h#{$i} {
//         @if $i != h#{$i} {
//             font-size: 10px * $i;
//         }
//         color: rgb(random(255),random(255), random(255));
//     }
// }

// @each at-rule - @each <variable> in <expression> { ... }
// The @each rule makes it easy to emit styles or evaluate code for each element of a list or each pair in a map.

$spacing: 1,2,3,4,5,6;
@each $increment in $spacing {
    .m-#{$increment}, .p#{$increment} {
        margin: #{$increment}rem;
        padding: #{$increment}rem;
        border: 1px solid red;
    }
}